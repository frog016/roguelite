using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;

[CustomEditor(typeof(SpinePerson))]
public class SpinePersonEditor : Editor {

	SpinePerson target_object;

	void OnEnable(){
		target_object = (target as SpinePerson);
		target_object.self=target_object;

		null_texture=new Texture2D(19,19);
		for (int y = 0; y < null_texture.height; y++){
			for (int x = 0; x < null_texture.width; x++){
				if(y>0&&x>0&&y<null_texture.height-1&&x<null_texture.width-1){
					null_texture.SetPixel(x, y, Color.clear);
				}else{
					null_texture.SetPixel(x, y, Color.black);
				}
			}
		}
		null_texture.Apply();

		target_object.spine_anim=target_object.GetComponent<SkeletonAnimation>();

		/*if(target_object.gameObject.activeInHierarchy){
			//target_object.spine_anim.Update();
		}*/
	}

	Texture2D null_texture;
	bool initiated=false;

	List<Spine.Animation> animations;
	string[] anim_names;
	
	List<Spine.Bone> bones;
	string[] bone_names;

	public override void OnInspectorGUI() {

		if(!initiated){
			try{
				animations=target_object.spine_anim.skeleton.Data.Animations;
				int _anim_len=animations.Count;
				anim_names=new string[_anim_len];
				for(int i=0;i<_anim_len;i++){
					anim_names[i]=animations[i].Name;
				}
				
				bones=target_object.spine_anim.skeleton.Bones;
				int _bone_len=bones.Count;
				bone_names=new string[_bone_len];
				for(int i=0;i<_bone_len;i++){
					bone_names[i]=bones[i].Data.Name;
				}

				initiated=true;

				target_object.initEffects();

			}catch{
				EditorGUILayout.HelpBox("Spine Component not initiated, try reselect object!",MessageType.Warning);
				return;
			}
		}

		GUILayout.Space(10);

		for(int i=0;i<target_object.linked_effects.Count;i++){
			Rect _box_rect=GUILayoutUtility.GetLastRect();
			_box_rect.min=_box_rect.max-new Vector2(5,5);
			target_object.linked_effects[i]=drawLightData(target_object.linked_effects[i]);
			if(GUILayout.Button("delete",EditorStyles.miniButtonRight)){
				target_object.linked_effects.RemoveAt(i);
			}

			//Color _gui_clr=GUI.backgroundColor;
			//GUI.backgroundColor=Color.clear;
			Rect _box_end=GUILayoutUtility.GetLastRect();
			_box_rect.max=_box_end.max+new Vector2(5,5);
			GUIStyle _style=new GUIStyle(GUI.skin.box);
			_style.normal.background=null_texture;
			GUI.Box(_box_rect,"",_style);
			//GUI.backgroundColor=_gui_clr;

			GUILayout.Space(15);
		}

		GUILayout.Space(15);

		if(GUILayout.Button("Add Effect")){
			target_object.linked_effects.Add(new SpinePersonEffect());
		}

		if(GUI.changed){
			if(target_object.gameObject.activeInHierarchy){
				target_object.initEffects();
			}
			EditorUtility.SetDirty(target_object);
		}

	}

	string[] types_nms=new string[]{"simple","withbone"};

	SpinePersonEffect drawLightData(SpinePersonEffect _item) {
		if(_item==null){
			_item=new SpinePersonEffect();
		}

		EditorGUI.indentLevel++;
		GameObject _prefab=EditorGUILayout.ObjectField("Prefab",_item.effect_prefab,typeof(GameObject),false) as GameObject;
		if(_item.effect_prefab!=_prefab){
			_item.effect_prefab=_prefab;
			
			if(_item.effect!=null)DestroyImmediate(_item.effect,false);
		}
		
		_item.type = EditorGUILayout.Popup("animation",_item.type, types_nms);
		if(_item.type==1){
			EditorGUI.indentLevel++;
			_item.bone_id = EditorGUILayout.Popup("Bone",_item.bone_id, bone_names);
			_item.bone=bones[_item.bone_id];
			_item.bone_name=_item.bone.Data.Name;
			EditorGUI.indentLevel--;
		}

		_item.z_free=EditorGUILayout.Toggle("Free Z pos",_item.z_free);
		if(!_item.z_free){
			_item.fixed_z=EditorGUILayout.FloatField("Fixed Z",_item.fixed_z);
		}
		
		_item.pivot=EditorGUILayout.Vector3Field("Pivot",_item.pivot);
		_item.rotation=EditorGUILayout.Vector3Field("Rotation",_item.rotation);
		_item.to_scale=EditorGUILayout.Vector3Field("Scale",_item.to_scale);
		EditorGUI.indentLevel--;

		return _item;
	}
}
